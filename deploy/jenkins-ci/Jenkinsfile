/*
 * The Jenkins job should be configured with the following properties:
 *
 * - Disable concurrent builds
 * - Parameters (all must be trimmed; all are strings):
 *   - RELEASE_TYPE
 *      defaultValue: auto
 *      description: Valid values are: auto, minor, snapshot.0, snapshot.1, edge. When "auto" is
 *                   specified, the type of the release will be determined based on the current date.
 *   - BACKEND_RELEASING_BRANCH
 *      defaultValue: refs/heads/master
 *      description: Branch of the backend to release
 *   - UI_RELEASING_BRANCH
 *      defaultValue: refs/heads/master
 *      description: Branch of the UI to release
 *   - SITE_RELEASING_BRANCH
 *      defaultValue: refs/heads/master
 *      description: Branch of the website to release
 *   - OPERATOR_RELEASING_BRANCH
 *      defaultValue: refs/heads/master
 *      description: Branch of the operator to release
 *   - BACKEND_GITHUB_URI
 *      defaultValue: git@github.com:kiali/kiali.git
 *      description: SSH Url of the kiali-backend GitHub repository
 *   - UI_GITHUB_URI
 *      defaultValue: git@github.com:kiali/kiali-ui.git
 *      description: SSH Url of the kiali-ui GitHub repository
 *   - SITE_GITHUB_URI
 *      defaultValue: git@github.com:kiali/kiali.io.git
 *      description: SSH Url of the kiali.io GitHub repository
 *   - OPERATOR_GITHUB_URI
 *      defaultValue: git@github.com:kiali/kiali-operator.git
 *      description: SSH Url of the kiali-operator GitHub repository
 *   - HELM_GITHUB_URI
 *      defaultValue: git@github.com:kiali/helm-charts.git
 *      description: SSH Url of the helm-charts GitHub repository
 *   - QUAY_NAME
 *      defaultValue: quay.io/kiali/kiali
 *      description: The name of the Quay repository to push the release
 *   - QUAY_OPERATOR_NAME
 *      defaultValue: quay.io/kiali/kiali-operator
 *      description: The name of the Quay repository to push the operator release
 *   - BACKEND_PULL_URI
 *      defaultValue: https://api.github.com/repos/kiali/kiali/pulls
 *      description: The URL of the GitHub API to use to create pull requests for the back-end (changes to prepare for next version)
 *   - UI_PULL_URI
 *      defaultValue: https://api.github.com/repos/kiali/kiali-ui/pulls
 *      description: The URL of the GitHub API to use to create pull requests for the UI (changes to prepare for next version)
 *   - SITE_PULL_URI
 *      defaultValue: https://api.github.com/repos/kiali/kiali.io/pulls
 *      description: The URL of the GitHub API to use to create pull requests for the website (changes to prepare for next version)
 *   - OPERATOR_PULL_URI
 *      defaultValue: https://api.github.com/repos/kiali/kiali-operator/pulls
 *      description: The URL of the GitHub API to use to create pull requests for the operator (changes to prepare for next version)
 *   - HELM_PULL_URI
 *      defaultValue: https://api.github.com/repos/kiali/helm-charts/pulls
 *      description: The URL of the GitHub API to use to create pull requests for the helm charts (changes to prepare for next version)
 *   - NPM_DRY_RUN
 *      defaultValue: n
 *      description: Set to "y" if you want to make a "dry run" of the front-end release process
 *   - SKIP_UI_RELEASE
 *      defaultValue: n
 *      description: Set to 'y' if you don't want to release the UI
 *   - SKIP_BACKEND_RELEASE
 *      defaultValue: n
 *      description: Set to 'y' if you don't want to release the backend
 *   - SKIP_OPERATOR_RELEASE
 *      defaultValue: n
 *      description: Set to 'y' if you don't want to release the operator
 *   - SKIP_HELM_RELEASE
 *      defaultValue: n
 *      description: Set to 'y' if you don't want to release the helm charts
 *   - SHOULD_RELEASE_SITE
 *      defaultValue: auto
 *      description: Set to 'y' to force release of the website even for patch versions
 *   - UI_VERSION
 *       defaultValue: ''
 *       description: If you are skipping UI release. Specify the UI version to package, or leave
 *                    unset to use the version present in the main Makefile (e.g. leave unset for patch releases)
 *   - NPM_CONFIG_REGISTRY
 *       defaultValue: ''
 *       description: Registry to use for fetching packages. This is not used for publishing releases.
 *                    Do not include the trailing slash.
 */

node('kiali-build') {
  def (backendForkUri, uiForkUri, operatorForkUri,helmForkUri) = ['git@github.com:kiali-bot/kiali.git', 'git@github.com:kiali-bot/kiali-ui.git', 'git@github.com:kiali-bot/kiali-operator.git', 'git@github.com:kiali-bot/helm-charts.git']
  def (backendDir, uiDir, operatorDir, helmDir, siteDir) = ['src/github.com/kiali/kiali', 'src/github.com/kiali/kiali-ui', 'src/github.com/kiali/kiali-operator', 'src/github.com/kiali/helm-charts', 'src/github.com/kiali/kiali.io']
  def (backendMakefile, uiMakefile, operatorMakefile, helmMakefile, siteMakefile) = ['deploy/jenkins-ci/Makefile', 'Makefile.jenkins', 'Makefile.operator.jenkins', 'Makefile.helm.jenkins', 'Makefile.site.jenkins']
  def buildUi = params.SKIP_UI_RELEASE != "y"
  def buildBackend = params.SKIP_BACKEND_RELEASE != "y"
  def buildOperator = params.SKIP_OPERATOR_RELEASE != "y"
  def buildHelm = params.SKIP_HELM_RELEASE != "y" && (params.RELEASE_TYPE == "minor" || params.RELEASE_TYPE == "major")
  def buildSite = (params.SHOULD_RELEASE_SITE == "auto" && params.RELEASE_TYPE == "minor") || params.SHOULD_RELEASE_SITE == "y"
  def quayTag = ""

  try {
    cleanWs()
    stage('Checkout code') {
      if ( buildBackend || buildOperator || buildSite || buildHelm ) {
        checkout([
          $class: 'GitSCM',
          branches: [[name: params.BACKEND_RELEASING_BRANCH]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: backendDir]
          ],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: 'kiali-bot-gh-ssh',
            url: params.BACKEND_GITHUB_URI]]
        ])

        sh "cd ${backendDir}; git config user.email 'kiali-dev@googlegroups.com'"
        sh "cd ${backendDir}; git config user.name 'kiali-bot'"
      }
      if ( buildUi ) {
        checkout([
          $class: 'GitSCM',
          branches: [[name: params.UI_RELEASING_BRANCH]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: uiDir]
          ],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: 'kiali-bot-gh-ssh',
            url: params.UI_GITHUB_URI]]
        ])

        sh "cd ${uiDir}; git config user.email 'kiali-dev@googlegroups.com'"
        sh "cd ${uiDir}; git config user.name 'kiali-bot'"
      }
      if ( buildOperator ) {
        checkout([
          $class: 'GitSCM',
          branches: [[name: params.OPERATOR_RELEASING_BRANCH]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: operatorDir]
          ],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: 'kiali-bot-gh-ssh',
            url: params.OPERATOR_GITHUB_URI]]
        ])

        sh "cd ${operatorDir}; git config user.email 'kiali-dev@googlegroups.com'"
        sh "cd ${operatorDir}; git config user.name 'kiali-bot'"
        sh "cp ${backendDir}/deploy/jenkins-ci/${operatorMakefile} ${operatorDir}"
      }
      if ( buildHelm ) {
        checkout([
          $class: 'GitSCM',
          branches: [[name: 'master']],
          doGenerateSubmoduleConfigurations: false,
          extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: helmDir]
          ],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: 'kiali-bot-gh-ssh',
            url: params.HELM_GITHUB_URI]]
        ])

        sh "cd ${helmDir}; git config user.email 'kiali-dev@googlegroups.com'"
        sh "cd ${helmDir}; git config user.name 'kiali-bot'"
        sh "cp ${backendDir}/deploy/jenkins-ci/${helmMakefile} ${helmDir}"
      }

      if ( buildSite ) {
        checkout([
            $class: 'GitSCM',
            branches: [[name: params.SITE_RELEASING_BRANCH]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: siteDir]
            ],
            submoduleCfg: [],
            userRemoteConfigs: [[
            credentialsId: 'kiali-bot-gh-ssh',
            url: params.SITE_GITHUB_URI]]
        ])

          sh "cd ${siteDir}; git config user.email 'kiali-dev@googlegroups.com'"
          sh "cd ${siteDir}; git config user.name 'kiali-bot'"
          sh "cp ${backendDir}/deploy/jenkins-ci/${siteMakefile} ${siteDir}"
      }
    }

    // Determine release type if "auto" was specified
    def releaseType = "${params.RELEASE_TYPE}"
    if ( releaseType == "auto" ) {
      releaseType = sh(
        returnStdout: true,
        script: "${backendDir}/deploy/jenkins-ci/bin/determine-release-type.sh").trim()
    }
    echo "Resolved release type: ${releaseType}"

    withEnv(["PATH+TOOLS=${env.WORKSPACE}/${backendDir}/deploy/jenkins-ci/bin",
            "GOPATH=${env.WORKSPACE}",
            "BACKEND_FORK_URI=${backendForkUri}",
            "UI_FORK_URI=${uiForkUri}",
            "OPERATOR_FORK_URI=${operatorForkUri}",
            "HELM_FORK_URI=${helmForkUri}",
            "RELEASE_TYPE=${releaseType}"
    ]) {
      parallel backend: {
        withEnv(["GOPATH=${env.WORKSPACE}"]) {
          stage('Build backend') {
            if ( buildBackend ) {
              sh "make -f ${backendMakefile} -C ${backendDir} backend-build-release"
            }
          }
          stage('Test backend') {
            if ( buildBackend ) {
              sh "make -f ${backendMakefile} -C ${backendDir} backend-test"
            }
          }
        }
      }, ui: {
        stage('Build UI') {
          if ( buildUi ) {
            sh "make -f ${uiMakefile} -C ${uiDir} ui-fix-version ui-build"
          }
        }
        stage('Test UI') {
          if ( buildUi ) {
            sh "make -f ${uiMakefile} -C ${uiDir} ui-test"
          }
        }
      }, operator: {
        stage('Build Operator') {
          if ( buildOperator ) {
            sh "make -f ${operatorMakefile} -C ${operatorDir} operator-build-release"
          }
        }
      }, helm: {
        stage('Build Helm Charts') {
          if ( buildHelm ) {
            sh "make -f ${helmMakefile} -C ${helmDir} helm-build-release"
          }
        }
      },

      failFast: true

      stage('Release kiali-ui to NPM') {
        if ( buildUi ) {
          withCredentials([string(credentialsId: 'kiali-npm', variable: 'NPM_TOKEN')]) {
            sh "make -f ${uiMakefile} -C ${uiDir} ui-npm-publish"
          }
        }
      }

      stage('Create release cut in front-end repo') {
        if ( buildUi ) {
          withCredentials([string(credentialsId: 'kiali-bot-gh-token', variable: 'GH_TOKEN')]) {
            sshagent(['kiali-bot-gh-ssh']) {
              sh "make -f ${uiMakefile} -C ${uiDir} ui-push-version-tag ui-prepare-next-version"
            }
          }
        }
      }

      stage('Release Kiali to Container Repositories') {
        if ( buildBackend ) {
          withCredentials([usernamePassword(credentialsId: 'kiali-quay', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USER')]) {
            sh "make -f ${backendMakefile} -C ${backendDir} backend-push-docker"
            quayTag = sh(returnStdout: true, script: "sed -rn 's/^VERSION \\?= v(.*)/v\\1/p' ${backendDir}/Makefile").trim()
          }
        }
      }

      stage('Create release cut in back-end repo') {
        if ( buildBackend ) {
          withCredentials([string(credentialsId: 'kiali-bot-gh-token', variable: 'GH_TOKEN')]) {
            sshagent(['kiali-bot-gh-ssh']) {
              sh "make -f ${backendMakefile} -C ${backendDir} backend-push-version-tag backend-prepare-next-version"
            }
          }
        }
      }

      stage('Release Kiali Operator to Container Repositories') {
        if ( buildOperator ) {
          withCredentials([usernamePassword(credentialsId: 'kiali-quay', passwordVariable: 'QUAY_PASSWORD', usernameVariable: 'QUAY_USER')]) {
            sh "make -f ${operatorMakefile} -C ${operatorDir} operator-push-quay"
            quayTag = sh(returnStdout: true, script: "sed -rn 's/^VERSION \\?= v(.*)/v\\1/p' ${operatorDir}/Makefile").trim()
          }
        }
      }

      stage('Create release cut in operator repo') {
        if ( buildOperator ) {
          withCredentials([string(credentialsId: 'kiali-bot-gh-token', variable: 'GH_TOKEN')]) {
            sshagent(['kiali-bot-gh-ssh']) {
              sh "make -f ${operatorMakefile} -C ${operatorDir} operator-push-version-tag operator-prepare-next-version"
            }
          }
        }
      }

      stage('Create release cut in helm repo') {
        if ( buildHelm ) {
          withCredentials([string(credentialsId: 'kiali-bot-gh-token', variable: 'GH_TOKEN')]) {
            sshagent(['kiali-bot-gh-ssh']) {
              sh "make -f ${helmMakefile} -C ${helmDir} helm-push-version-tag helm-prepare-next-version"
            }
          }
        }
      }

      stage('Create release for the website') {
        if ( buildSite ) {
          withCredentials([string(credentialsId: 'kiali-bot-gh-token', variable: 'GH_TOKEN')]) {
            sshagent(['kiali-bot-gh-ssh']) {
              sh "make -f ${siteMakefile} -C ${siteDir} website-build-archive"
            }
          }
        }
      }

     stage('Post Msg Bus Notification') {
       if ( releaseType == "minor" ) {
           build(job: 'kiali-release-notifier',
             parameters: [
               [$class: 'StringParameterValue', value: 'minor', name: 'RELEASE_TYPE'],
               [$class: 'StringParameterValue', value: "${params.QUAY_NAME}", name: 'QUAY_NAME'],
               [$class: 'StringParameterValue', value: quayTag, name: 'QUAY_TAG']
             ], wait: false
           )
       }
     }
    }
  } finally {
    cleanWs()
  }
}
